/*
 * QEMU ARC SEMANTIC MAPPING.
 *
 * Copyright (c) 2020 Synopsys, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2 or later, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 */

SEMANTIC_FUNCTION(FLAG, 1)
SEMANTIC_FUNCTION(KFLAG, 1)
SEMANTIC_FUNCTION(ADD, 3)
SEMANTIC_FUNCTION(ADD1, 3)
SEMANTIC_FUNCTION(ADD2, 3)
SEMANTIC_FUNCTION(ADD3, 3)
SEMANTIC_FUNCTION(ADC, 3)
SEMANTIC_FUNCTION(SBC, 3)
SEMANTIC_FUNCTION(NEG, 2)
SEMANTIC_FUNCTION(SUB, 3)
SEMANTIC_FUNCTION(SUB1, 3)
SEMANTIC_FUNCTION(SUB2, 3)
SEMANTIC_FUNCTION(SUB3, 3)
SEMANTIC_FUNCTION(MAX, 3)
SEMANTIC_FUNCTION(MIN, 3)
SEMANTIC_FUNCTION(CMP, 2)
SEMANTIC_FUNCTION(AND, 3)
SEMANTIC_FUNCTION(OR, 3)
SEMANTIC_FUNCTION(XOR, 3)
SEMANTIC_FUNCTION(MOV, 2)
SEMANTIC_FUNCTION(ASL, 3)
SEMANTIC_FUNCTION(ASR, 3)
SEMANTIC_FUNCTION(ASR8, 2)
SEMANTIC_FUNCTION(ASR16, 2)
SEMANTIC_FUNCTION(LSL16, 2)
SEMANTIC_FUNCTION(LSL8, 2)
SEMANTIC_FUNCTION(LSR, 3)
SEMANTIC_FUNCTION(LSR16, 2)
SEMANTIC_FUNCTION(LSR8, 2)
SEMANTIC_FUNCTION(BIC, 3)
SEMANTIC_FUNCTION(BCLR, 3)
SEMANTIC_FUNCTION(BMSK, 3)
SEMANTIC_FUNCTION(BMSKN, 3)
SEMANTIC_FUNCTION(BSET, 3)
SEMANTIC_FUNCTION(BXOR, 3)
SEMANTIC_FUNCTION(ROL, 2)
SEMANTIC_FUNCTION(ROL8, 2)
SEMANTIC_FUNCTION(ROR, 3)
SEMANTIC_FUNCTION(ROR8, 2)
SEMANTIC_FUNCTION(RLC, 2)
SEMANTIC_FUNCTION(RRC, 2)
SEMANTIC_FUNCTION(SEXB, 2)
SEMANTIC_FUNCTION(SEXH, 2)
SEMANTIC_FUNCTION(EXTB, 2)
SEMANTIC_FUNCTION(EXTH, 2)
SEMANTIC_FUNCTION(BTST, 2)
SEMANTIC_FUNCTION(TST, 2)
SEMANTIC_FUNCTION(XBFU, 3)
SEMANTIC_FUNCTION(AEX, 2)
SEMANTIC_FUNCTION(LR, 2)
SEMANTIC_FUNCTION(SR, 2)
SEMANTIC_FUNCTION(SYNC, 0)
SEMANTIC_FUNCTION(CLRI, 1)
SEMANTIC_FUNCTION(SETI, 1)
SEMANTIC_FUNCTION(NOP, 0)
SEMANTIC_FUNCTION(PREALLOC, 0)
SEMANTIC_FUNCTION(PREFETCH, 2)
SEMANTIC_FUNCTION(MPY, 3)
SEMANTIC_FUNCTION(MPYMU, 3)
SEMANTIC_FUNCTION(MPYM, 3)
SEMANTIC_FUNCTION(MPYU, 3)
SEMANTIC_FUNCTION(MPYUW, 3)
SEMANTIC_FUNCTION(MPYW, 3)
SEMANTIC_FUNCTION(DIV, 3)
SEMANTIC_FUNCTION(DIVU, 3)
SEMANTIC_FUNCTION(REM, 3)
SEMANTIC_FUNCTION(REMU, 3)
SEMANTIC_FUNCTION(MAC, 3)
SEMANTIC_FUNCTION(MACU, 3)
SEMANTIC_FUNCTION(MACD, 3)
SEMANTIC_FUNCTION(MACDU, 3)
SEMANTIC_FUNCTION(ABS, 2)
SEMANTIC_FUNCTION(SWAP, 2)
SEMANTIC_FUNCTION(SWAPE, 2)
SEMANTIC_FUNCTION(NOT, 2)
SEMANTIC_FUNCTION(BI, 1)
SEMANTIC_FUNCTION(BIH, 1)
SEMANTIC_FUNCTION(B, 1)
SEMANTIC_FUNCTION(B_S, 1)
SEMANTIC_FUNCTION(BBIT0, 3)
SEMANTIC_FUNCTION(BBIT1, 3)
SEMANTIC_FUNCTION(BL, 1)
SEMANTIC_FUNCTION(J, 1)
SEMANTIC_FUNCTION(JL, 1)
SEMANTIC_FUNCTION(SETEQ, 3)
SEMANTIC_FUNCTION(BREQ, 3)
SEMANTIC_FUNCTION(SETNE, 3)
SEMANTIC_FUNCTION(BRNE, 3)
SEMANTIC_FUNCTION(SETLT, 3)
SEMANTIC_FUNCTION(BRLT, 3)
SEMANTIC_FUNCTION(SETGE, 3)
SEMANTIC_FUNCTION(BRGE, 3)
SEMANTIC_FUNCTION(SETLE, 3)
SEMANTIC_FUNCTION(SETGT, 3)
SEMANTIC_FUNCTION(BRLO, 3)
SEMANTIC_FUNCTION(SETLO, 3)
SEMANTIC_FUNCTION(BRHS, 3)
SEMANTIC_FUNCTION(SETHS, 3)
SEMANTIC_FUNCTION(EX, 2)
SEMANTIC_FUNCTION(LLOCK, 2)
SEMANTIC_FUNCTION(LLOCKD, 2)
SEMANTIC_FUNCTION(SCOND, 2)
SEMANTIC_FUNCTION(SCONDD, 2)
SEMANTIC_FUNCTION(DMB, 1)
SEMANTIC_FUNCTION(LD, 3)
SEMANTIC_FUNCTION(LDD, 3)
SEMANTIC_FUNCTION(ST, 3)
SEMANTIC_FUNCTION(STD, 3)
SEMANTIC_FUNCTION(ENTER_S, 1)
SEMANTIC_FUNCTION(LEAVE_S, 1)
SEMANTIC_FUNCTION(POP, 1)
SEMANTIC_FUNCTION(PUSH, 1)
SEMANTIC_FUNCTION(LP, 1)
SEMANTIC_FUNCTION(NORM, 2)
SEMANTIC_FUNCTION(NORMH, 2)
SEMANTIC_FUNCTION(FLS, 2)
SEMANTIC_FUNCTION(FFS, 2)


MAPPING(flag, FLAG, 1, 0)
MAPPING(kflag, KFLAG, 1, 0)
MAPPING(add, ADD, 3, 1, 2, 0)
MAPPING(add_s, ADD, 3, 1, 2, 0)
MAPPING(add1, ADD1, 3, 1, 2, 0)
MAPPING(add1_s, ADD1, 3, 1, 2, 0)
MAPPING(add2, ADD2, 3, 1, 2, 0)
MAPPING(add2_s, ADD2, 3, 1, 2, 0)
MAPPING(add3, ADD3, 3, 1, 2, 0)
MAPPING(add3_s, ADD3, 3, 1, 2, 0)
MAPPING(adc, ADC, 3, 1, 2, 0)
MAPPING(sbc, SBC, 3, 1, 2, 0)
MAPPING(neg, NEG, 2, 1, 0)
MAPPING(neg_s, NEG, 2, 1, 0)
MAPPING(sub, SUB, 3, 1, 2, 0)
MAPPING(sub_s, SUB, 3, 1, 2, 0)
MAPPING(rsub, SUB, 3, 2, 1, 0)
MAPPING(sub1, SUB1, 3, 1, 2, 0)
MAPPING(sub2, SUB2, 3, 1, 2, 0)
MAPPING(sub3, SUB3, 3, 1, 2, 0)
MAPPING(max, MAX, 3, 1, 2, 0)
MAPPING(min, MIN, 3, 1, 2, 0)
MAPPING(cmp, CMP, 2, 0, 1)
MAPPING(cmp_s, CMP, 2, 0, 1)
MAPPING(rcmp, CMP, 2, 1, 0)
MAPPING(and, AND, 3, 1, 2, 0)
MAPPING(and_s, AND, 3, 1, 2, 0)
MAPPING(or, OR, 3, 1, 2, 0)
MAPPING(or_s, OR, 3, 1, 2, 0)
MAPPING(xor, XOR, 3, 1, 2, 0)
MAPPING(xor_s, XOR, 3, 1, 2, 0)
MAPPING(mov, MOV, 2, 1, 0)
MAPPING(mov_s, MOV, 2, 1, 0)
CONSTANT(ASL, asl, 2, 268435457) /* For variable @c */
MAPPING(asl, ASL, 3, 1, 2, 0)
CONSTANT(ASL, asl_s, 2, 268435457) /* For variable @c */
MAPPING(asl_s, ASL, 3, 1, 2, 0)
CONSTANT(ASR, asr, 2, 1) /* For variable @c */
MAPPING(asr, ASR, 3, 1, 2, 0)
CONSTANT(ASR, asr_s, 2, 1) /* For variable @c */
MAPPING(asr_s, ASR, 3, 1, 2, 0)
MAPPING(asr8, ASR8, 2, 1, 0)
MAPPING(asr16, ASR16, 2, 1, 0)
MAPPING(lsl16, LSL16, 2, 1, 0)
MAPPING(lsl8, LSL8, 2, 1, 0)
CONSTANT(LSR, lsr, 2, 1) /* For variable @c */
MAPPING(lsr, LSR, 3, 1, 2, 0)
CONSTANT(LSR, lsr_s, 2, 1) /* For variable @c */
MAPPING(lsr_s, LSR, 3, 1, 2, 0)
MAPPING(lsr16, LSR16, 2, 1, 0)
MAPPING(lsr8, LSR8, 2, 1, 0)
MAPPING(bic, BIC, 3, 1, 2, 0)
MAPPING(bic_s, BIC, 3, 1, 2, 0)
MAPPING(bclr, BCLR, 3, 2, 1, 0)
MAPPING(bclr_s, BCLR, 3, 2, 1, 0)
MAPPING(bmsk, BMSK, 3, 2, 1, 0)
MAPPING(bmsk_s, BMSK, 3, 2, 1, 0)
MAPPING(bmskn, BMSKN, 3, 2, 1, 0)
MAPPING(bset, BSET, 3, 2, 1, 0)
MAPPING(bset_s, BSET, 3, 2, 1, 0)
MAPPING(bxor, BXOR, 3, 2, 1, 0)
MAPPING(rol, ROL, 2, 1, 0)
MAPPING(rol8, ROL8, 2, 1, 0)
CONSTANT(ROR, ror, 2, 1) /* For variable @n */
MAPPING(ror, ROR, 3, 1, 2, 0)
MAPPING(ror8, ROR8, 2, 1, 0)
MAPPING(rlc, RLC, 2, 1, 0)
MAPPING(rrc, RRC, 2, 1, 0)
MAPPING(sexb, SEXB, 2, 0, 1)
MAPPING(sexb_s, SEXB, 2, 0, 1)
MAPPING(sexh, SEXH, 2, 0, 1)
MAPPING(sexh_s, SEXH, 2, 0, 1)
MAPPING(extb, EXTB, 2, 0, 1)
MAPPING(extb_s, EXTB, 2, 0, 1)
MAPPING(exth, EXTH, 2, 0, 1)
MAPPING(exth_s, EXTH, 2, 0, 1)
MAPPING(btst, BTST, 2, 1, 0)
MAPPING(btst_s, BTST, 2, 1, 0)
MAPPING(tst, TST, 2, 0, 1)
MAPPING(tst_s, TST, 2, 0, 1)
MAPPING(xbfu, XBFU, 3, 2, 1, 0)
MAPPING(aex, AEX, 2, 1, 0)
MAPPING(lr, LR, 2, 0, 1)
MAPPING(sr, SR, 2, 1, 0)
MAPPING(sync, SYNC, 0)
MAPPING(clri, CLRI, 1, 0)
MAPPING(seti, SETI, 1, 0)
MAPPING(nop, NOP, 0)
MAPPING(nop_s, NOP, 0)
MAPPING(prealloc, PREALLOC, 0)
CONSTANT(PREFETCH, prefetch, 1, 0) /* For variable @src2 */
MAPPING(prefetch, PREFETCH, 2, 0, 1)
CONSTANT(PREFETCH, prefetchw, 1, 0) /* For variable @src2 */
MAPPING(prefetchw, PREFETCH, 2, 0, 1)
MAPPING(mpy, MPY, 3, 1, 2, 0)
MAPPING(mpy_s, MPY, 3, 1, 2, 0)
MAPPING(mpymu, MPYMU, 3, 0, 1, 2)
MAPPING(mpym, MPYM, 3, 0, 1, 2)
MAPPING(mpyu, MPYU, 3, 1, 2, 0)
MAPPING(mpyuw, MPYUW, 3, 0, 1, 2)
MAPPING(mpyuw_s, MPYUW, 3, 0, 1, 2)
MAPPING(mpyw, MPYW, 3, 0, 1, 2)
MAPPING(mpyw_s, MPYW, 3, 0, 1, 2)
MAPPING(div, DIV, 3, 2, 1, 0)
MAPPING(divu, DIVU, 3, 2, 0, 1)
MAPPING(rem, REM, 3, 2, 1, 0)
MAPPING(remu, REMU, 3, 2, 0, 1)
MAPPING(mac, MAC, 3, 1, 2, 0)
MAPPING(macu, MACU, 3, 1, 2, 0)
MAPPING(macd, MACD, 3, 1, 2, 0)
MAPPING(macdu, MACDU, 3, 1, 2, 0)
MAPPING(abs, ABS, 2, 1, 0)
MAPPING(abs_s, ABS, 2, 1, 0)
MAPPING(swap, SWAP, 2, 1, 0)
MAPPING(swape, SWAPE, 2, 1, 0)
MAPPING(not, NOT, 2, 0, 1)
MAPPING(not_s, NOT, 2, 0, 1)
MAPPING(bi, BI, 1, 0)
MAPPING(bih, BIH, 1, 0)
MAPPING(b, B, 1, 0)
MAPPING(beq_s, B_S, 1, 0)
MAPPING(bne_s, B_S, 1, 0)
MAPPING(bgt_s, B_S, 1, 0)
MAPPING(bge_s, B_S, 1, 0)
MAPPING(blt_s, B_S, 1, 0)
MAPPING(ble_s, B_S, 1, 0)
MAPPING(bhi_s, B_S, 1, 0)
MAPPING(bhs_s, B_S, 1, 0)
MAPPING(blo_s, B_S, 1, 0)
MAPPING(bls_s, B_S, 1, 0)
MAPPING(b_s, B_S, 1, 0)
MAPPING(bbit0, BBIT0, 3, 0, 1, 2)
MAPPING(bbit1, BBIT1, 3, 0, 1, 2)
MAPPING(bl, BL, 1, 0)
MAPPING(bl_s, BL, 1, 0)
MAPPING(j, J, 1, 0)
MAPPING(j_s, J, 1, 0)
MAPPING(jeq_s, J, 1, 0)
MAPPING(jne_s, J, 1, 0)
MAPPING(jl, JL, 1, 0)
MAPPING(jl_s, JL, 1, 0)
MAPPING(seteq, SETEQ, 3, 1, 2, 0)
MAPPING(breq, BREQ, 3, 0, 1, 2)
MAPPING(breq_s, BREQ, 3, 0, 1, 2)
MAPPING(setne, SETNE, 3, 1, 2, 0)
MAPPING(brne, BRNE, 3, 0, 1, 2)
MAPPING(brne_s, BRNE, 3, 0, 1, 2)
MAPPING(setlt, SETLT, 3, 1, 2, 0)
MAPPING(brlt, BRLT, 3, 0, 1, 2)
MAPPING(setge, SETGE, 3, 1, 2, 0)
MAPPING(brge, BRGE, 3, 0, 1, 2)
MAPPING(setle, SETLE, 3, 1, 2, 0)
MAPPING(setgt, SETGT, 3, 1, 2, 0)
MAPPING(brlo, BRLO, 3, 0, 1, 2)
MAPPING(setlo, SETLO, 3, 1, 2, 0)
MAPPING(brhs, BRHS, 3, 0, 1, 2)
MAPPING(seths, SETHS, 3, 1, 2, 0)
MAPPING(ex, EX, 2, 0, 1)
MAPPING(llock, LLOCK, 2, 0, 1)
MAPPING(llockd, LLOCKD, 2, 0, 1)
MAPPING(scond, SCOND, 2, 1, 0)
MAPPING(scondd, SCONDD, 2, 1, 0)
MAPPING(dmb, DMB, 1, 0)
CONSTANT(LD, ld, 2, 0) /* For variable @src2 */
MAPPING(ld, LD, 3, 1, 2, 0)
MAPPING(ld_s, LD, 3, 1, 2, 0)
MAPPING(ldb_s, LD, 3, 1, 2, 0)
MAPPING(ldh_s, LD, 3, 1, 2, 0)
MAPPING(ldw_s, LD, 3, 1, 2, 0)
CONSTANT(LD, ldi, 2, 0) /* For variable @src2 */
MAPPING(ldi, LD, 3, 1, 2, 0)
CONSTANT(LD, ldi_s, 2, 0) /* For variable @src2 */
MAPPING(ldi_s, LD, 3, 1, 2, 0)
CONSTANT(LDD, ldd, 2, 0) /* For variable @src2 */
MAPPING(ldd, LDD, 3, 1, 2, 0)
CONSTANT(ST, st, 2, 0) /* For variable @src2 */
MAPPING(st, ST, 3, 1, 2, 0)
MAPPING(st_s, ST, 3, 1, 2, 0)
MAPPING(stb_s, ST, 3, 1, 2, 0)
MAPPING(sth_s, ST, 3, 1, 2, 0)
MAPPING(stw_s, ST, 3, 1, 2, 0)
CONSTANT(STD, std, 2, 0) /* For variable @src2 */
MAPPING(std, STD, 3, 1, 2, 0)
MAPPING(enter_s, ENTER_S, 1, 0)
MAPPING(leave_s, LEAVE_S, 1, 0)
MAPPING(pop_s, POP, 1, 0)
MAPPING(push_s, PUSH, 1, 0)
MAPPING(lp, LP, 1, 0)
MAPPING(norm, NORM, 2, 1, 0)
MAPPING(normh, NORMH, 2, 1, 0)
MAPPING(fls, FLS, 2, 1, 0)
MAPPING(ffs, FFS, 2, 1, 0)
